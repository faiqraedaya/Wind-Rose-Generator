import tkinter as tk
from tkinter import filedialog, ttk, simpledialog
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from windrose import WindroseAxes
import numpy as np
import xml.etree.ElementTree as ET
import os

class WindRoseAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("Wind Data Viewer")
        self.root.geometry("1500x1000")

        self.data = None
        self.file_path = None
        self.speed_bins = [0, 2, 5, 10, 15, 50]
        self.dir_bins = np.arange(-11.25, 360, 22.5)

        self.create_widgets()

    def create_widgets(self):
        self.create_top_frame()
        self.create_left_frame()
        self.create_right_frame()

    def create_top_frame(self):
        top_frame = tk.Frame(self.root)
        top_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=10)

        tk.Button(top_frame, text="Import File", command=self.import_file).pack(side=tk.LEFT, padx=5)
        tk.Button(top_frame, text="Save Wind Rose as JPG", command=self.save_wind_rose).pack(side=tk.LEFT, padx=5)
        tk.Button(top_frame, text="Save Table as MERIT XML", command=self.save_table).pack(side=tk.LEFT, padx=5)
        tk.Button(top_frame, text="Set Speed Bins", command=self.set_speed_bins).pack(side=tk.LEFT, padx=5)
        tk.Button(top_frame, text="Set Direction Bins", command=self.set_direction_bins).pack(side=tk.LEFT, padx=5)

    def create_left_frame(self):
        self.left_frame = tk.Frame(self.root, width=400)
        self.left_frame.pack(side=tk.LEFT, fill=tk.BOTH, padx=10, pady=10)

    def create_right_frame(self):
        self.right_frame = tk.Frame(self.root)
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)

    def read_data(self, file_path):
        with open(file_path, 'r') as file:
            lines = file.readlines()
            data_start = next(i for i, line in enumerate(lines) if line.startswith('%|           date'))
        
        self.data = pd.read_csv(file_path, skiprows=data_start+1, 
                           names=['date', 'WindSpeed_10m', 'WindDirection_10m', 'HourlyRainfall', 
                                  'AirTemperature', 'CloudCover', 'SolarRadiation', 'RelativeHumidity', 
                                  'BarometricPressure', 'NegAirtemp'])
        
        self.data['WindSpeed_10m'] = pd.to_numeric(self.data['WindSpeed_10m'], errors='coerce')
        self.data['WindDirection_10m'] = pd.to_numeric(self.data['WindDirection_10m'], errors='coerce')
        
        self.data = self.data.replace([np.inf, -np.inf], np.nan).dropna(subset=['WindSpeed_10m', 'WindDirection_10m'])
        
        self.data['WindDirection_10m'] = self.data['WindDirection_10m'] % 360
        
        return self.data

    def create_wind_rose(self):
        wind_speed = self.data['WindSpeed_10m']
        wind_dir = self.data['WindDirection_10m']
        
        ax = WindroseAxes.from_ax()
        ax.bar(wind_dir, wind_speed, normed=True, opening=0.8, edgecolor='white', bins=self.speed_bins)
        
        speed_labels = [f"{self.speed_bins[i]}-{self.speed_bins[i+1]}" for i in range(len(self.speed_bins)-1)]
        speed_labels[-1] = f"{self.speed_bins[-2]}+"
        ax.set_legend(title="Wind Speed (m/s)", labels=speed_labels)
        
        ax.set_title(f"Wind Rose - {os.path.basename(self.file_path)}")
        
        return ax.figure

    def create_frequency_table(self):
        speed_labels = [f"{self.speed_bins[i]}-{self.speed_bins[i+1]}" for i in range(len(self.speed_bins)-1)]
        speed_labels[-1] = f"{self.speed_bins[-2]}+"
        dir_labels = [f"{i:.1f}" for i in np.arange(0, 360, 360/len(self.dir_bins))]
        del(dir_labels[-1])

        print(speed_labels)
        print(dir_labels)
        print(self.dir_bins)

        self.data['speed_bin'] = pd.cut(self.data['WindSpeed_10m'], bins=self.speed_bins, labels=speed_labels, include_lowest=True)
        self.data['dir_bin'] = pd.cut(self.data['WindDirection_10m'], bins=self.dir_bins, labels=dir_labels, include_lowest=True)

        freq_table = pd.crosstab(self.data['speed_bin'], self.data['dir_bin'], normalize=True)
        return freq_table

    def import_file(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("DLP files", "*.dlp"), ("Text files", "*.txt")])
        if self.file_path:
            self.data = self.read_data(self.file_path)
            self.update_display()

    def update_display(self):
        self.update_frequency_table()
        self.update_wind_rose()

    def update_frequency_table(self):
        freq_table = self.create_frequency_table()
        for widget in self.left_frame.winfo_children():
            widget.destroy()
        tree = ttk.Treeview(self.left_frame)
        tree["columns"] = ["Wind Speed (m/s)"] + list(freq_table.columns)
        tree["show"] = "headings"
        for column in tree["columns"]:
            tree.heading(column, text=column)
            tree.column(column, width=50, anchor="center")
        tree.column("Wind Speed (m/s)", width=100, anchor="w")
        for index, row in freq_table.iterrows():
            values = [index] + [f"{val:.4f}" for val in row]
            tree.insert("", "end", values=values)
        tree.pack(fill=tk.BOTH, expand=True)

    def update_wind_rose(self):
        fig = self.create_wind_rose()
        for widget in self.right_frame.winfo_children():
            widget.destroy()
        canvas = FigureCanvasTkAgg(fig, master=self.right_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def save_wind_rose(self):
        fig = plt.gcf()
        file_path = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPEG files", "*.jpg")])
        if file_path:
            fig.savefig(file_path, format='jpg', dpi=300, bbox_inches='tight')

    def save_table(self):
        freq_table = self.create_frequency_table()
        file_path = filedialog.asksaveasfilename(defaultextension=".xml", filetypes=[("XML files", "*.xml")])
        if file_path:
            root = ET.Element("Data")
            ET.SubElement(root, "Information").text = "No information"
            ET.SubElement(root, "Name").text = "MyWindRose"
            
            velocity_bands = " ".join(map(str, self.speed_bins[1:]))
            ET.SubElement(root, "Velocity_Bands").text = velocity_bands
            
            headings_probabilities = ET.SubElement(root, "Headings_Probabilities")
            
            for column in freq_table.columns:
                heading_prob = ET.SubElement(headings_probabilities, "Heading_Probabilities")
                heading_prob.text = " ".join(f"{val:.4f}" for val in freq_table[column])
            
            tree = ET.ElementTree(root)
            tree.write(file_path, xml_declaration=True, encoding='utf-8', method="xml")

    def set_speed_bins(self):
        bins_str = simpledialog.askstring("Speed Bins", "Enter speed bins separated by spaces:")
        if bins_str:
            try:
                self.speed_bins = [float(x) for x in bins_str.split()]
                self.speed_bins.sort()
                if self.data is not None:
                    self.update_display()
            except ValueError:
                tk.messagebox.showerror("Error", "Invalid input. Please enter numbers separated by spaces.")

    def set_direction_bins(self):
        num_bins = simpledialog.askinteger("Direction Bins", "Enter number of direction bins:")
        if num_bins:
            try:
                self.dir_bins = np.linspace(0, 360, num_bins + 1)
                if self.data is not None:
                    self.update_display()
            except ValueError:
                tk.messagebox.showerror("Error", "Invalid input. Please enter a positive integer.")

if __name__ == "__main__":
    root = tk.Tk()
    app = WindRoseAnalyzer(root)
    root.mainloop()